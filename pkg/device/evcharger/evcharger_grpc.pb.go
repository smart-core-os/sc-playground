// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: pkg/device/evcharger/evcharger.proto

package evcharger

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EVChargerApiClient is the client API for EVChargerApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EVChargerApiClient interface {
	PlugIn(ctx context.Context, in *PlugInRequest, opts ...grpc.CallOption) (*PlugInResponse, error)
	ChargeStart(ctx context.Context, in *ChargeStartRequest, opts ...grpc.CallOption) (*ChargeStartResponse, error)
	Unplug(ctx context.Context, in *UnplugRequest, opts ...grpc.CallOption) (*UnplugResponse, error)
}

type eVChargerApiClient struct {
	cc grpc.ClientConnInterface
}

func NewEVChargerApiClient(cc grpc.ClientConnInterface) EVChargerApiClient {
	return &eVChargerApiClient{cc}
}

func (c *eVChargerApiClient) PlugIn(ctx context.Context, in *PlugInRequest, opts ...grpc.CallOption) (*PlugInResponse, error) {
	out := new(PlugInResponse)
	err := c.cc.Invoke(ctx, "/smartcore.playground.device.evcharger.EVChargerApi/PlugIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eVChargerApiClient) ChargeStart(ctx context.Context, in *ChargeStartRequest, opts ...grpc.CallOption) (*ChargeStartResponse, error) {
	out := new(ChargeStartResponse)
	err := c.cc.Invoke(ctx, "/smartcore.playground.device.evcharger.EVChargerApi/ChargeStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eVChargerApiClient) Unplug(ctx context.Context, in *UnplugRequest, opts ...grpc.CallOption) (*UnplugResponse, error) {
	out := new(UnplugResponse)
	err := c.cc.Invoke(ctx, "/smartcore.playground.device.evcharger.EVChargerApi/Unplug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EVChargerApiServer is the server API for EVChargerApi service.
// All implementations must embed UnimplementedEVChargerApiServer
// for forward compatibility
type EVChargerApiServer interface {
	PlugIn(context.Context, *PlugInRequest) (*PlugInResponse, error)
	ChargeStart(context.Context, *ChargeStartRequest) (*ChargeStartResponse, error)
	Unplug(context.Context, *UnplugRequest) (*UnplugResponse, error)
	mustEmbedUnimplementedEVChargerApiServer()
}

// UnimplementedEVChargerApiServer must be embedded to have forward compatible implementations.
type UnimplementedEVChargerApiServer struct {
}

func (UnimplementedEVChargerApiServer) PlugIn(context.Context, *PlugInRequest) (*PlugInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlugIn not implemented")
}
func (UnimplementedEVChargerApiServer) ChargeStart(context.Context, *ChargeStartRequest) (*ChargeStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChargeStart not implemented")
}
func (UnimplementedEVChargerApiServer) Unplug(context.Context, *UnplugRequest) (*UnplugResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unplug not implemented")
}
func (UnimplementedEVChargerApiServer) mustEmbedUnimplementedEVChargerApiServer() {}

// UnsafeEVChargerApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EVChargerApiServer will
// result in compilation errors.
type UnsafeEVChargerApiServer interface {
	mustEmbedUnimplementedEVChargerApiServer()
}

func RegisterEVChargerApiServer(s grpc.ServiceRegistrar, srv EVChargerApiServer) {
	s.RegisterService(&EVChargerApi_ServiceDesc, srv)
}

func _EVChargerApi_PlugIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlugInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EVChargerApiServer).PlugIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.playground.device.evcharger.EVChargerApi/PlugIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EVChargerApiServer).PlugIn(ctx, req.(*PlugInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EVChargerApi_ChargeStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChargeStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EVChargerApiServer).ChargeStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.playground.device.evcharger.EVChargerApi/ChargeStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EVChargerApiServer).ChargeStart(ctx, req.(*ChargeStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EVChargerApi_Unplug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnplugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EVChargerApiServer).Unplug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.playground.device.evcharger.EVChargerApi/Unplug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EVChargerApiServer).Unplug(ctx, req.(*UnplugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EVChargerApi_ServiceDesc is the grpc.ServiceDesc for EVChargerApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EVChargerApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.playground.device.evcharger.EVChargerApi",
	HandlerType: (*EVChargerApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlugIn",
			Handler:    _EVChargerApi_PlugIn_Handler,
		},
		{
			MethodName: "ChargeStart",
			Handler:    _EVChargerApi_ChargeStart_Handler,
		},
		{
			MethodName: "Unplug",
			Handler:    _EVChargerApi_Unplug_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/device/evcharger/evcharger.proto",
}
