// Code generated by protoc-gen-router. DO NOT EDIT.

package evcharger

import (
	context "context"
	fmt "fmt"

	router "github.com/smart-core-os/sc-golang/pkg/router"
	grpc "google.golang.org/grpc"
)

// ApiRouter is a evcharger.EVChargerApiServer that allows routing named requests to specific evcharger.EVChargerApiClient
type ApiRouter struct {
	UnimplementedEVChargerApiServer

	router.Router
}

// compile time check that we implement the interface we need
var _ EVChargerApiServer = (*ApiRouter)(nil)

func NewApiRouter(opts ...router.Option) *ApiRouter {
	return &ApiRouter{
		Router: router.NewRouter(opts...),
	}
}

// WithEVChargerApiClientFactory instructs the router to create a new
// client the first time Get is called for that name.
func WithEVChargerApiClientFactory(f func(name string) (EVChargerApiClient, error)) router.Option {
	return router.WithFactory(func(name string) (interface{}, error) {
		return f(name)
	})
}

func (r *ApiRouter) Register(server *grpc.Server) {
	RegisterEVChargerApiServer(server, r)
}

// Add extends Router.Add to panic if client is not of type evcharger.EVChargerApiClient.
func (r *ApiRouter) Add(name string, client interface{}) interface{} {
	if !r.HoldsType(client) {
		panic(fmt.Sprintf("not correct type: client of type %T is not a evcharger.EVChargerApiClient", client))
	}
	return r.Router.Add(name, client)
}

func (r *ApiRouter) HoldsType(client interface{}) bool {
	_, ok := client.(EVChargerApiClient)
	return ok
}

func (r *ApiRouter) AddEVChargerApiClient(name string, client EVChargerApiClient) EVChargerApiClient {
	res := r.Add(name, client)
	if res == nil {
		return nil
	}
	return res.(EVChargerApiClient)
}

func (r *ApiRouter) RemoveEVChargerApiClient(name string) EVChargerApiClient {
	res := r.Remove(name)
	if res == nil {
		return nil
	}
	return res.(EVChargerApiClient)
}

func (r *ApiRouter) GetEVChargerApiClient(name string) (EVChargerApiClient, error) {
	res, err := r.Get(name)
	if err != nil {
		return nil, err
	}
	if res == nil {
		return nil, nil
	}
	return res.(EVChargerApiClient), nil
}

func (r *ApiRouter) PlugIn(ctx context.Context, request *PlugInRequest) (*PlugInResponse, error) {
	child, err := r.GetEVChargerApiClient(request.Name)
	if err != nil {
		return nil, err
	}

	return child.PlugIn(ctx, request)
}

func (r *ApiRouter) ChargeStart(ctx context.Context, request *ChargeStartRequest) (*ChargeStartResponse, error) {
	child, err := r.GetEVChargerApiClient(request.Name)
	if err != nil {
		return nil, err
	}

	return child.ChargeStart(ctx, request)
}

func (r *ApiRouter) Unplug(ctx context.Context, request *UnplugRequest) (*UnplugResponse, error) {
	child, err := r.GetEVChargerApiClient(request.Name)
	if err != nil {
		return nil, err
	}

	return child.Unplug(ctx, request)
}
